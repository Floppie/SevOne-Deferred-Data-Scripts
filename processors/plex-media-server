#!/usr/bin/python2
import calendar
import lxml.etree
import mechanize
import re
import sys
import time
from datetime import datetime
from optparse import OptionParser

# Constants {{{
regex_number = re.compile('-?[0-9,.]+')
regex_time = re.compile('([0-9]+):([0-9]+):?([0-9]+)?')
regex_remove_movies = re.compile(' [Mm]ovies$')
regex_remove_rated = re.compile('^Rated ')
regex_search_key = re.compile('search\?.*')
regex_sublib_by = re.compile('^By ')
regex_ys = re.compile(r'ys\b', re.I)
regex_remove_s = re.compile('s$')
# }}}

def get_numbers(string): # {{{
	numbers = regex_number.findall(string)
	if(len(numbers) == 0):
		return ['NULL']
	
	for i in xrange(len(numbers)):
		numbers[i] = numbers[i].replace(',', '')
	
	return numbers
# }}}

def secs_to_mins(numbers): # {{{
	return str((int(numbers[0]) + (int(numbers[1]) / 60.0)))
# }}}

def get_date(): # {{{
	return str(int(time.mktime(datetime.now().timetuple())))
# }}}

def avg(numerator, denominator): # {{{
	return '0' if denominator == 0 else str(numerator / denominator)
# }}}

def parse_page(url): # {{{
	response = br.open(url)
	return lxml.etree.fromstring(response.read())
# }}}

def count_children(parent, match): # {{{
	count = 0
	for item in parent:
		if(item.tag == match):
			count += 1
	return count
# }}}

def count_recursive(parent, match): # {{{
	count = 0
	for item in parent:
		if(item.tag == match):
			count += 1
		count += count_recursive(item, match)
	return count
# }}}

def total_children_attr(parent, attr): # {{{
	total = 0
	for item in parent:
		value = item.get(attr)
		if(type(value) is str):
			total += int(value)
	return total
# }}}

def total_children_attr(parent, tagname, attr): # {{{
	total = 0
	for item in parent:
		if(item.tag == tagname):
			value = item.get(attr)
			if(type(value) is str):
				total += int(value)
	return total
# }}}

def total_recursive_attr(parent, attr): # {{{
	total = 0
	for item in parent:
		value = item.get(attr)
		if(type(value) is str):
			total += int(value)
		total += total_recursive_attr(item, attr)
	return total
# }}}

def total_recursive_attr(parent, tagname, attr): # {{{
	total = 0
	for item in parent:
		if(item.tag == tagname):
			value = item.get(attr)
			if(type(value) is str):
				total += int(value)
		total += total_recursive_attr(item, tagname, attr)
	return total
# }}}

def subtract_dict(dict1, dict2): # {{{
	new_dict = {}
	for key in dict1.keys():
		if(dict2.has_key(key)):
			new_dict[key] = dict1[key] - dict2[key]
	return new_dict
# }}}

# movie stuff {{{
def movie_struct(count, duration, size): # {{{
	return {'count' : float(count), 'duration' : float(duration), 'size' : float(size)}
# }}}

def add_to_movie_struct(original, count, duration, size): # {{{
	return {'count' : original['count'] + count, 'duration' : original['duration'] + duration, 'size' : original['size'] + size}
# }}}

def add_movie_struct(dict1, dict2): # {{{
	return add_to_movie_struct(dict1, dict2['count'], dict2['duration'], dict2['size'])
# }}}

def print_movie_section_simple(name, count, duration, size): # {{{
	sys.stdout.write(' "' + name + '" GAUGE Number ' + str(count))
	sys.stdout.write(' "' + name + ' - total duration" GAUGE Milliseconds ' + str(duration))
	sys.stdout.write(' "' + name + ' - average duration" GAUGE Milliseconds ' + avg(duration, count))
	sys.stdout.write(' "' + name + ' - total file size" GAUGE Bytes ' + str(size))
	sys.stdout.write(' "' + name + ' - average file size" GAUGE Bytes ' + avg(size, count))
# }}}

def handle_movie_section_simple(name, url): # {{{
	page = parse_page(url)
	daters = movie_struct(count_children(page, 'Video'), total_children_attr(page, 'Video', 'duration'), total_recursive_attr(page, 'Part', 'size'))
	print_movie_section_simple(name, daters['count'], daters['duration'], daters['size'])
	return daters
# }}}

def handle_movie_section_without_specifics(name, url, do_average_number = True, do_average_duration = True, do_average_size = True): # {{{
	listing_page = parse_page(url)
	grouping_count = count_children(listing_page, 'Directory')
	grouping_length = 0
	grouping_duration = 0
	grouping_size = 0
	for item in listing_page:
		if(item.tag == 'Directory'):
			grouping_key = item.get('key')
			if(type(grouping_key) is str):
				grouping_page = parse_page(url + '/' + grouping_key)
				grouping_length += count_children(grouping_page, 'Video')
				grouping_duration += total_children_attr(grouping_page, 'Video', 'duration')
				grouping_size += total_children_attr(grouping_page, 'Part', 'size')
	sys.stdout.write(' "' + name + '" GAUGE Number ' + str(grouping_count))
	if(do_average_number):
		sys.stdout.write(' "' + name + ' - average number of movies" GAUGE Number ' + avg(grouping_length, grouping_count))
	if(do_average_duration):
		sys.stdout.write(' "' + name + ' - average total duration" GAUGE Milliseconds ' + avg(grouping_duration, grouping_count))
	if(do_average_size):
		sys.stdout.write(' "' + name + ' - average total of file sizes" GAUGE Bytes ' + avg(grouping_size, grouping_count))
# }}}

def handle_movie_section_with_specifics(name, url, mask_name_regex = None): # {{{
	listing_page = parse_page(url)
	grouping_count = count_children(listing_page, 'Directory')
	grouping_length = 0
	grouping_duration = 0
	grouping_size = 0
	specifics = {}
	for item in listing_page:
		if(item.tag == 'Directory'):
			grouping_key = item.get('key')
			grouping_name = item.get('title')

			if(type(grouping_key) is str and type(grouping_name) is str):
				if(mask_name_regex != None):
					grouping_name = mask_name_regex.sub('', grouping_name)

				if(grouping_name == ''):
					grouping_name = 'None'

				grouping_page = parse_page(url + '/' + grouping_key)
				daters = movie_struct(count_children(grouping_page, 'Video'), total_children_attr(grouping_page, 'Video', 'duration'), total_recursive_attr(grouping_page, 'Part', 'size'))
				grouping_length += daters['count']
				grouping_duration += daters['duration']
				grouping_size += daters['size']

				if(specifics.has_key(grouping_name)):
					specifics[grouping_name] = add_movie_struct(specifics[grouping_name], daters)
				else:
					specifics[grouping_name] = daters

	for grouping_name in specifics.keys():
		daters = specifics[grouping_name]
		sys.stdout.write(' "' + grouping_name + ' movies" GAUGE Number ' + str(daters['count']))
		sys.stdout.write(' "' + grouping_name + ' movies - total duration" GAUGE Milliseconds ' + str(daters['duration']))
		sys.stdout.write(' "' + grouping_name + ' movies - average duration" GAUGE Milliseconds ' + avg(daters['duration'], daters['count']))
		sys.stdout.write(' "' + grouping_name + ' movies - total file size" GAUGE Bytes ' + str(daters['size']))
		sys.stdout.write(' "' + grouping_name + ' movies - average file size" GAUGE Bytes ' + avg(daters['size'], daters['count']))

	sys.stdout.write(' "' + name + '" GAUGE Number ' + str(grouping_count))
	sys.stdout.write(' "' + name + ' - average number of movies" GAUGE Number ' + avg(grouping_length, grouping_count))
	sys.stdout.write(' "' + name + ' - average total duration" GAUGE Milliseconds ' + avg(grouping_duration, grouping_count))
	sys.stdout.write(' "' + name + ' - average total of file sizes" GAUGE Bytes ' + avg(grouping_size, grouping_count))
# }}}

def handle_movie_section_only_specifics(url, mask_name_regex = None): # {{{
	listing_page = parse_page(url)
	specifics = {}
	for item in listing_page:
		if(item.tag == 'Directory'):
			grouping_key = item.get('key')
			grouping_name = item.get('title')

			if(type(grouping_key) is str and type(grouping_name) is str):
				if(mask_name_regex != None):
					grouping_name = mask_name_regex.sub('', grouping_name)

				if(grouping_name == ''):
					grouping_name = 'None'

				grouping_page = parse_page(url + '/' + grouping_key)
				daters = movie_struct(count_children(grouping_page, 'Video'), total_children_attr(grouping_page, 'Video', 'duration'), total_recursive_attr(grouping_page, 'Part', 'size'))

				if(specifics.has_key(grouping_name)):
					specifics[grouping_name] = add_movie_struct(specifics[grouping_name], daters)
				else:
					specifics[grouping_name] = daters

	for name in specifics.keys():
		daters = specifics[name]
		sys.stdout.write(' "' + name + ' movies" GAUGE Number ' + str(daters['count']))
		sys.stdout.write(' "' + name + ' movies - total duration" GAUGE Milliseconds ' + str(daters['duration']))
		sys.stdout.write(' "' + name + ' movies - average duration" GAUGE Milliseconds ' + avg(daters['duration'], daters['count']))
		sys.stdout.write(' "' + name + ' movies - total file size" GAUGE Bytes ' + str(daters['size']))
		sys.stdout.write(' "' + name + ' movies - average file size" GAUGE Bytes ' + avg(daters['size'], daters['count']))
# }}}

def handle_movie_library(key, title): # {{{
	sys.stdout.write(get_date() + ' "Plex movie library ' + key + '" "Plex Media Server movie library" "' + title + '"')
	library_page = parse_page(server + '/library/sections/' + key)

	all_movies = handle_movie_section_simple('All movies', server + '/library/sections/' + key + '/all')
	unwatched_movies = handle_movie_section_simple('Unwatched movies', server + '/library/sections/' + key + '/unwatched')
	watched_movies = subtract_dict(all_movies, unwatched_movies)
	print_movie_section_simple('Watched movies', watched_movies['count'], watched_movies['duration'], watched_movies['size'])

	handle_movie_section_simple('Recently released movies', server + '/library/sections/' + key + '/newest')
	handle_movie_section_simple('Recently added movies', server + '/library/sections/' + key + '/recentlyAdded')
	handle_movie_section_simple('Recently viewed movies', server + '/library/sections/' + key + '/recentlyViewed')
	handle_movie_section_simple('On-deck movies', server + '/library/sections/' + key + '/onDeck')
	handle_movie_section_without_specifics('Collections', server + '/library/sections/' + key + '/collection')
	handle_movie_section_without_specifics('Genres', server + '/library/sections/' + key + '/genre')
	handle_movie_section_without_specifics('Years', server + '/library/sections/' + key + '/year')
	handle_movie_section_with_specifics('Decades', server + '/library/sections/' + key + '/decade')
	handle_movie_section_without_specifics('Directors', server + '/library/sections/' + key + '/director', True, False, False)
	handle_movie_section_without_specifics('Actors', server + '/library/sections/' + key + '/actor', True, False, False)
	handle_movie_section_without_specifics('Countries', server + '/library/sections/' + key + '/country')
	handle_movie_section_with_specifics('Content ratings', server + '/library/sections/' + key + '/contentRating', regex_remove_rated)
	handle_movie_section_with_specifics('Ratings', server + '/library/sections/' + key + '/rating', regex_remove_s)
	handle_movie_section_with_specifics('Resolutions', server + '/library/sections/' + key + '/resolution')
	handle_movie_section_only_specifics(server + '/library/sections/' + key + '/firstCharacter')

	sys.stdout.write("\n")
# }}}
# }}}

# show stuff {{{
def show_struct(shows, seasons, episodes, duration, size): # {{{
	return {'shows' : float(shows), 'seasons' : float(seasons), 'episodes' : float(episodes), 'duration' : float(duration), 'size' : float(size)}
# }}}

def add_to_show_struct(original, shows, seasons, episodes, duration, size): # {{{
	return show_struct(original['shows'] + shows, original['seasons'] + seasons, original['episodes'] + episodes, original['duration'] + duration, original['size'] + size)
# }}}

def add_show_struct(dict1, dict2): # {{{
	return add_to_show_struct(dict1, dict2['shows'], dict2['seasons'], dict2['episodes'], dict2['duration'], dict2['size'])
# }}}

def get_show_stats(show_key): # {{{
	show_page = parse_page(server + show_key)
	seasons_count = count_children(show_page, 'Directory')
	episodes_count = 0
	duration = 0
	size = 0
	for season in show_page:
		if(season.tag == 'Directory'):
			season_key = season.get('key')
			if(type(season_key) is str):
				season_page = parse_page(server + season_key)
				episodes_count += count_children(season_page, 'Video')
				duration += total_children_attr(season_page, 'Video', 'duration')
				size += total_recursive_attr(season_page, 'Part', 'size')
	return show_struct(0, seasons_count, episodes_count, duration, size)
# }}}

def print_show_section_simple(name, shows, seasons, episodes, duration, size): # {{{
	sys.stdout.write(' "' + name + ' shows" GAUGE Number ' + str(shows))
	sys.stdout.write(' "' + name + ' shows - average number of seasons" GAUGE Number ' + avg(seasons, shows))
	sys.stdout.write(' "' + name + ' shows - average number of episodes" GAUGE Number ' + avg(episodes, shows))
	sys.stdout.write(' "' + name + ' shows - total duration" GAUGE Milliseconds ' + str(duration))
	sys.stdout.write(' "' + name + ' shows - average duration" GAUGE Milliseconds ' + avg(duration, shows))
	sys.stdout.write(' "' + name + ' shows - total file size" GAUGE Bytes ' + str(size))
	sys.stdout.write(' "' + name + ' shows - average total file size" GAUGE Bytes ' + avg(size, shows))
	sys.stdout.write(' "' + name + ' shows - number of seasons" GAUGE Number ' + str(seasons))
	sys.stdout.write(' "' + name + ' shows - average number of episodes per season" GAUGE Number ' + avg(episodes, seasons))
	sys.stdout.write(' "' + name + ' shows - average season duration" GAUGE Milliseconds ' + avg(duration, seasons))
	sys.stdout.write(' "' + name + ' shows - average season total file size" GAUGE Bytes ' + avg(size, seasons))
	sys.stdout.write(' "' + name + ' shows - number of episodes" GAUGE Number ' + str(episodes))
	sys.stdout.write(' "' + name + ' shows - average episode duration" GAUGE Milliseconds ' + avg(duration, episodes))
	sys.stdout.write(' "' + name + ' shows - average episode file size" GAUGE Bytes ' + avg(size, episodes))
# }}}

def handle_show_section_simple(name, url, do_print = True): # {{{
	page = parse_page(url)
	section_data = show_struct(count_children(page, 'Directory'), 0, 0, 0, 0)
	for show in page:
		if(show.tag == 'Directory'):
			show_key = show.get('key')
			if(type(show_key) is str):
				show_data = get_show_stats(show_key)
				section_data = add_show_struct(section_data, show_data)
	if(do_print):
		print_show_section_simple(name, section_data['shows'], section_data['seasons'], section_data['episodes'], section_data['duration'], section_data['size'])
	return section_data
# }}}

def handle_show_section_flat(name, url): # {{{
	page = parse_page(url)
	episodes = count_children(page, 'Video')
	duration = float(total_children_attr(page, 'Video', 'duration'))
	size = float(total_recursive_attr(page, 'Part', 'size'))
	sys.stdout.write(' "' + name + ' episodes" GAUGE Number ' + str(episodes))
	sys.stdout.write(' "' + name + ' episodes - total duration" GAUGE Milliseconds ' + str(duration))
	sys.stdout.write(' "' + name + ' episodes - average duration" GAUGE Milliseconds ' + avg(duration, episodes))
	sys.stdout.write(' "' + name + ' episodes - total file size" GAUGE Bytes ' + str(size))
	sys.stdout.write(' "' + name + ' episodes - average file size" GAUGE Bytes ' + avg(size, episodes))
# }}}

def handle_show_section_without_specifics(name, url): # {{{
	page = parse_page(url)
	groupings = count_children(page, 'Directory')
	grouping_data = show_struct(0, 0, 0, 0, 0)
	for grouping in page:
		if(grouping.tag == 'Directory'):
			grouping_key = grouping.get('key')
			if(type(grouping_key) is str):
				this_grouping_data = handle_show_section_simple('derp', url + '/' + grouping_key, False)
				grouping_data = add_show_struct(grouping_data, this_grouping_data)
	sys.stdout.write(' "' + name + '" GAUGE Number ' + str(groupings))
	sys.stdout.write(' "' + name + ' - average number of shows" GAUGE Number ' + avg(grouping_data['shows'], groupings))
	sys.stdout.write(' "' + name + ' - average number of seasons" GAUGE Number ' + avg(grouping_data['seasons'], groupings))
	sys.stdout.write(' "' + name + ' - average number of episodes" GAUGE Number ' + avg(grouping_data['episodes'], groupings))
# }}}

def handle_show_section_with_specifics(name, url, mask_name_regex = None): # {{{
	page = parse_page(url)
	groupings = count_children(page, 'Directory')
	grouping_data = show_struct(0, 0, 0, 0, 0)
	for grouping in page:
		if(grouping.tag == 'Directory'):
			grouping_key = grouping.get('key')
			grouping_title = grouping.get('title')
			if(type(grouping_key) is str and type(grouping_title) is str):
				if(mask_name_regex != None):
					grouping_title = mask_name_regex.sub('', grouping_title)
				if(grouping_title == ''):
					grouping_title = 'None'
				this_grouping_data = handle_show_section_simple(grouping_title + ' shows', url + '/' + grouping_key)
				grouping_data = add_show_struct(grouping_data, this_grouping_data)
	sys.stdout.write(' "' + name + '" GAUGE Number ' + str(groupings))
	sys.stdout.write(' "' + name + ' - average number of shows" GAUGE Number ' + avg(grouping_data['shows'], groupings))
	sys.stdout.write(' "' + name + ' - average number of seasons" GAUGE Number ' + avg(grouping_data['seasons'], groupings))
	sys.stdout.write(' "' + name + ' - average number of episodes" GAUGE Number ' + avg(grouping_data['episodes'], groupings))
# }}}

def handle_show_section_only_specifics(url): # {{{
	page = parse_page(url)
	groupings = count_children(page, 'Directory')
	for grouping in page:
		if(grouping.tag == 'Directory'):
			grouping_key = grouping.get('key')
			grouping_title = grouping.get('title')
			if(type(grouping_key) is str and type(grouping_title) is str):
				handle_show_section_simple(grouping_title, url + '/' + grouping_key)
# }}}

def handle_show_library(key, title): # {{{
	sys.stdout.write(get_date() + ' "Plex TV show library ' + key + '" Plex Media Server show library" "' + title + '"')
	library_page = parse_page(server + '/library/sections/' + key)

	all_shows = handle_show_section_simple('All', server + '/library/sections/' + key + '/all')
	unwatched_shows = handle_show_section_simple('Unwatched', server + '/library/sections/' + key + '/unwatched')
	watched_shows = subtract_dict(all_shows, unwatched_shows)
	print_show_section_simple('Watched', watched_shows['shows'], watched_shows['seasons'], watched_shows['episodes'], watched_shows['duration'], watched_shows['size'])

	handle_show_section_simple('Recently aired', server + '/library/sections/' + key + '/newest')
	handle_show_section_flat('Recently added', server + '/library/sections/' + key + '/recentlyAdded')
	handle_show_section_flat('Recently viewed', server + '/library/sections/' + key + '/recentlyViewed')
	handle_show_section_simple('Recently viewed', server + '/library/sections/' + key + '/recentlyViewedShows')
	handle_show_section_flat('On-deck', server + '/library/sections/' + key + '/onDeck')
	handle_show_section_without_specifics('Collections', server + '/library/sections/' + key + '/collection')
	handle_show_section_only_specifics(server + '/library/sections/' + key + '/firstCharacter')
	handle_show_section_without_specifics('Genres', server + '/library/sections/' + key + '/genre')
	handle_show_section_without_specifics('Years', server + '/library/sections/' + key + '/year')
	handle_show_section_with_specifics('Content ratings', server + '/library/sections/' + key + '/contentRating', regex_remove_rated)

	sys.stdout.write('\n')
# }}}
# }}}

# music stuff {{{
def music_struct(artists, albums, songs, duration, size): # {{{
	return {'artists' : float(artists), 'albums' : float(albums), 'songs' : float(songs), 'duration' : float(duration), 'size' : float(duration)}
# }}}

def add_to_music_struct(original, artists, albums, songs, duration, size): # {{{
	return music_struct(original['artists'] + artists, original['albums'] + albums, original['songs'] + songs, original['duration'] + duration, original['size'] + size)
# }}}

def add_music_struct(dict1, dict2): # {{{
	return add_to_music_struct(dict1, dict2['artists'], dict2['albums'], dict2['songs'], dict2['duration'], dict2['size'])
# }}}

def get_album_stats(album_key): # {{{
	page = parse_page(server + album_key)
	return music_struct(0, 0, count_children(page, 'Track'), total_children_attr(page, 'Track', 'duration'), total_recursive_attr(page, 'Part', 'size'))
# }}}

def get_artist_stats(artist_key): # {{{
	page = parse_page(server + artist_key)
	artist_data = music_struct(0, 0, 0, 0, 0)
	for album in page:
		if(album.tag == 'Directory'):
			album_key = album.get('key')
			album_title = album.get('title')
			if(type(album_key) is str and type(album_title) is str and album_title != 'All tracks'):
				album_data = get_album_stats(album_key)
				artist_data = add_music_struct(artist_data, album_data)
				artist_data['albums'] += 1
	return artist_data
# }}}

def print_song_stats(name, struct): # {{{
	sys.stdout.write(' "' + name + ' songs" GAUGE Number ' + str(struct['songs']))
	sys.stdout.write(' "' + name + ' songs - total duration" GAUGE Milliseconds ' + str(struct['duration']))
	sys.stdout.write(' "' + name + ' songs - average duration" GAUGE Milliseconds ' + avg(struct['duration'], struct['songs']))
	sys.stdout.write(' "' + name + ' songs - total of file sizes" GAUGE Bytes ' + str(struct['size']))
	sys.stdout.write(' "' + name + ' songs - average file size" GAUGE Bytes ' + avg(struct['size'], struct['songs']))
# }}}

def print_album_stats(name, struct): # {{{
	sys.stdout.write(' "' + name + ' albums" GAUGE Number ' + str(struct['albums']))
	sys.stdout.write(' "' + name + ' albums - average number of songs" GAUGE Number ' + avg(struct['songs'], struct['albums']))
	sys.stdout.write(' "' + name + ' albums - average duration" GAUGE Milliseconds ' + avg(struct['duration'], struct['albums']))
	sys.stdout.write(' "' + name + ' albums - average total of file sizes" GAUGE Bytes ' + avg(struct['size'], struct['albums']))
	print_song_stats(name, struct)
# }}}

def print_artist_stats(name, struct): # {{{
	sys.stdout.write(' "' + name + ' artists" GAUGE Number ' + str(struct['artists']))
	sys.stdout.write(' "' + name + ' artists - average number of albums" GAUGE Number ' + avg(struct['albums'], struct['artists']))
	sys.stdout.write(' "' + name + ' artists - average number of songs" GAUGE Number ' + avg(struct['songs'], struct['artists']))
	sys.stdout.write(' "' + name + ' artists - average duration" GAUGE Milliseconds ' + avg(struct['duration'], struct['artists']))
	sys.stdout.write(' "' + name + ' artists - average total of file sizes" GAUGE Bytes ' + avg(struct['size'], struct['artists']))
	print_album_stats(name, struct)
# }}}

def handle_artist_grouping(name, url, do_print = True): # {{{
	page = parse_page(url)
	section_data = music_struct(0, 0, 0, 0, 0)
	for artist in page:
		if(artist.tag == 'Directory'):
			artist_key = artist.get('key')
			if(type(artist_key) is str):
				artist_data = get_artist_stats(artist_key)
				section_data = add_music_struct(section_data, artist_data)
				section_data['artists'] += 1
	if(do_print):
		print_artist_stats(name, section_data)
	return section_data
# }}}

def handle_album_grouping(name, url): # {{{
	page = parse_page(url)
	section_data = music_struct(0, 0, 0, 0, 0)
	for album in page:
		if(album.tag == 'Directory'):
			album_key = album.get('key')
			if(type(album_key) is str):
				album_data = get_album_stats(album_key)
				section_data = add_music_struct(section_data, album_data)
				section_data['albums'] += 1
	print_album_stats(name, section_data)
	return section_data
# }}}

def handle_music_section_without_specifics(name, url): # {{{
	page = parse_page(url)
	groupings = 0
	section_data = music_struct(0, 0, 0, 0, 0)
	for grouping in page:
		if(grouping.tag == 'Directory'):
			grouping_key = grouping.get('key')
			if(type(grouping_key) is str):
				grouping_data = handle_artist_grouping(name, url + '/' + grouping_key, False)
				section_data = add_music_struct(section_data, grouping_data)
				groupings += 1
	sys.stdout.write(' "' + name + '" GAUGE Number ' + str(groupings))
	sys.stdout.write(' "' + name + ' - average number of artists" GAUGE Number ' + avg(section_data['artists'], groupings))
	sys.stdout.write(' "' + name + ' - average number of albums" GAUGE Number ' + avg(section_data['albums'], groupings))
	sys.stdout.write(' "' + name + ' - average number of songs" GAUGE Number ' + avg(section_data['songs'], groupings))
	sys.stdout.write(' "' + name + ' - average total duration" GAUGE Milliseconds ' + avg(section_data['duration'], groupings))
	sys.stdout.write(' "' + name + ' - average total of file sizes" GAUGE Bytes ' + avg(section_data['size'], groupings))
# }}}

def handle_music_section_with_specifics(name, url, mask_name_regex = None): # {{{
	page = parse_page(url)
	groupings = 0
	section_data = music_struct(0, 0, 0, 0, 0)
	for grouping in page:
		if(grouping.tag == 'Directory'):
			grouping_key = grouping.get('key')
			grouping_name = grouping.get('title')
			if(type(grouping_key) is str and type(grouping_name) is str):
				grouping_data = handle_artist_grouping(grouping_name, url + '/' + grouping_key, True)
				section_data = add_music_struct(section_data, grouping_data)
				groupings += 1
	sys.stdout.write(' "' + name + '" GAUGE Number ' + str(groupings))
	sys.stdout.write(' "' + name + ' - average number of artists" GAUGE Number ' + avg(section_data['artists'], groupings))
	sys.stdout.write(' "' + name + ' - average number of albums" GAUGE Number ' + avg(section_data['albums'], groupings))
	sys.stdout.write(' "' + name + ' - average number of songs" GAUGE Number ' + avg(section_data['songs'], groupings))
	sys.stdout.write(' "' + name + ' - average total duration" GAUGE Milliseconds ' + avg(section_data['duration'], groupings))
	sys.stdout.write(' "' + name + ' - average total of file sizes" GAUGE Bytes ' + avg(section_data['size'], groupings))
# }}}

def handle_music_library(key, title): # {{{
	sys.stdout.write(get_date() + ' "Plex music library ' + key + '" Plex Media Server music library" "' + title + '"')
	library_page = parse_page(server + '/library/sections/' + key)

	handle_artist_grouping('All', server + '/library/sections/' + key + '/all')
	handle_music_section_without_specifics('Genres', server + '/library/sections/' + key + '/genre')
	handle_music_section_with_specifics('Decades', server + '/library/sections/' + key + '/decade')
	handle_music_section_without_specifics('Years', server + '/library/sections/' + key + '/year')
	handle_music_section_without_specifics('Collections', server + '/library/sections/' + key + '/collection')
	handle_artist_grouping('Recently added', server + '/library/sections/' + key + '/recentlyAdded')

	sys.stdout.write('\n')
# }}}
# }}}

# Parse command-line arguments {{{
cmdline = OptionParser(usage = 'usage: %prog [options] hostname-or-ip')
cmdline.add_option('-p', '--port', action = 'store', dest = 'port', default = '32400', help = 'The TCP port that Plex\'s web service is listening on')

(options, args) = cmdline.parse_args()
if(len(args) != 1):
	cmdline.print_help()
	sys.exit(1)

(server,) = args
# }}}

# Browser setup {{{
# Initialize the browser
br = mechanize.Browser()

# Enable some handlers
br.set_handle_equiv(True)
#br.set_handle_gzip(True)
br.set_handle_redirect(True)
br.set_handle_referer(True)
br.set_handle_robots(False)

# Don't hang on >0 refresh times
br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time = 1)
# }}}

# Throw down our timestamp/object information

# Retrieve the page, parse into an XML document, and find the root of the stuff we care about
server = 'http://' + server + ':' + options.port
main = parse_page(server + '/library/sections')
for library in main:
	key = library.get('key')
	media = library.get('type')
	title = library.get('title')
	if(media == 'movie'):
		#print 'derp'
		handle_movie_library(key, title)
	elif(media == 'show'):
		#print 'derp'
		handle_show_library(key, title)
	elif(media == 'artist'):
		#print 'derp'
		handle_music_library(key, title)
		
