#!/usr/bin/python2.7
import calendar
import datetime
import json
import optparse
import sys
import time
import urllib2

# Constants {{{
DOMAIN = 'http://us.battle.net'
URL_BASE = DOMAIN + '/api/d3/profile/'

CLASSES = {
	'barbarian' : 'Barbarian',
	'crusader' : 'Crusader',
	'demon-hunter' : 'Demon Hunter',
	'monk' : 'Monk',
	'witch-doctor' : 'Witch Doctor',
	'wizard' : 'Wizard'
}

ARTISANS = {
	'blacksmith' : 'Blacksmith',
	'jeweler' : 'Jeweler',
	'mystic' : 'Mystic'
}

STATS = {
	'strength' : 'Strength',
	'dexterity' : 'Dexterity',
	'intelligence' : 'Intelligence',
	'vitality' : 'Vitality',
	'dps' : 'DPS',
	'toughness' : 'Toughness',
	'healing' : 'Healing'
}

FOLLOWERS = {
	'enchantress' : 'Enchantress',
	'scoundrel' : 'Scoundrel',
	'templar' : 'Templar'
}

FOLLOWER_STATS = {
	'goldfind' : 'Gold Find',
	'magicfind' : 'Magic Find',
	'experience' : 'Experience'
}
# }}}

# CLEVERLY NAMED function to retrieve a remote URL
def curl(url, data = None): # {{{
	req = urllib2.Request(url)

	if(data != None):
		req.add_data(urllib.urlencode(data))

	try:
		handle = urllib2.urlopen(req)
	except IOError, e:
		return ''
	
	data = handle.read()
	return data 
# }}}

# Warning: This will loop forever if curl or json.loads() keeps throwing exceptions
def curlJson(url, data = None): # {{{
	jsonSuccess = False
	failCount = 0
	while(failCount < 5 and not jsonSuccess):
		try:
			daters = json.loads(curl(url, data))
			jsonSuccess = True
		except:
			#print 'derped. herping again'
			failCount = failCount + 1
			jsonSuccess = False
	if(failCount >= 5):
		sys.exit(2)
	return daters
# }}}

def get_highest_level(heroes, classname): # {{{
	highest_level = 0
	for hero in [hero for hero in heroes if hero['class'] == classname]:
		if(hero['level'] > highest_level):
			highest_level = hero['level']
	return "NULL" if highest_level == 0 else highest_level
# }}}
		
# Parse command-line arguments {{{
cmdline = optparse.OptionParser(usage = 'usage: %prog profile-name')
cmdline.add_option('-j', '--json', action = 'store_true', dest = 'json', default = False, help = 'Output pretty JSON instead of SevOne-consumable text')

(options, args) = cmdline.parse_args()
if(len(args) != 1):
	cmdline.print_help()
	sys.exit(1)

(profile_name,) = args
# }}}

timestamp = str(int(calendar.timegm(datetime.datetime.utcnow().timetuple())))
# Go out and grab all our data from the API {{{
profile_url = URL_BASE + profile_name + '/'

heroes_remote = {}
account_data_remote = curlJson(profile_url)
for hero in account_data_remote['heroes']:
	heroes_remote[hero['id']] = curlJson(profile_url + 'hero/' + str(hero['id']))
# }}}

# Scrub it and make the data structures with just stuff we care about {{{
heroes = {}
account_data = {
	'acts_beaten' : account_data_remote['progression'].values().count(True),
	'blacksmith_normal' : str(account_data_remote['blacksmith']['level']),
	'blacksmith_hardcore' : str(account_data_remote['blacksmithHardcore']['level']),
	'elite_kills' : str(account_data_remote['kills']['elites']),
	'highest_level_barbarian' : str(get_highest_level(account_data_remote['heroes'], 'barbarian')),
	'highest_level_crusader' : str(get_highest_level(account_data_remote['heroes'], 'crusader')),
	'highest_level_demon-hunter' : str(get_highest_level(account_data_remote['heroes'], 'demon-hunter')),
	'highest_level_monk' : str(get_highest_level(account_data_remote['heroes'], 'monk')),
	'highest_level_witch-doctor' : str(get_highest_level(account_data_remote['heroes'], 'witch-doctor')),
	'highest_level_wizard' : str(get_highest_level(account_data_remote['heroes'], 'wizard')),
	'jeweler_normal' : str(account_data_remote['jeweler']['level']),
	'jeweler_hardcore' : str(account_data_remote['jewelerHardcore']['level']),
	'lifetime_kills' : str(account_data_remote['kills']['monsters']),
	'mystic_normal' : str(account_data_remote['mystic']['level']),
	'mystic_hardcore' : str(account_data_remote['mysticHardcore']['level']),
	'name' : account_data_remote['battleTag'],
	'paragon_level' : str(account_data_remote['paragonLevel']),
	'percent_time_barbarian' : str(int(100 * account_data_remote['timePlayed']['barbarian'])),
	'percent_time_crusader' : str(int(100 * account_data_remote['timePlayed']['crusader'])),
	'percent_time_demon-hunter' : str(int(100 * account_data_remote['timePlayed']['demon-hunter'])),
	'percent_time_monk' : str(int(100 * account_data_remote['timePlayed']['monk'])),
	'percent_time_witch-doctor' : str(int(100 * account_data_remote['timePlayed']['witch-doctor'])),
	'percent_time_wizard' : str(int(100 * account_data_remote['timePlayed']['wizard']))
}

for hero in heroes_remote.values():
	heroes[str(hero['id'])] = {
		'class' : CLASSES[hero['class']],
		'dexterity' : str(hero['stats']['dexterity']),
		'dps' : str(hero['stats']['damage']),
		'elite_kills' : str(hero['kills']['elites']),
		'follower_enchantress_experience' : '0' if not 'enchantress' in hero['followers'].keys() else str(hero['followers']['enchantress']['stats']['experienceBonus']),
		'follower_enchantress_goldfind' : '0' if not 'enchantress' in hero['followers'].keys() else str(hero['followers']['enchantress']['stats']['goldFind']),
		'follower_enchantress_magicfind' : '0' if not 'enchantress' in hero['followers'].keys() else str(hero['followers']['enchantress']['stats']['magicFind']),
		'follower_scoundrel_experience' : '0' if not 'scoundrel' in hero['followers'].keys() else str(hero['followers']['scoundrel']['stats']['experienceBonus']),
		'follower_scoundrel_goldfind' : '0' if not 'scoundrel' in hero['followers'].keys() else str(hero['followers']['scoundrel']['stats']['goldFind']),
		'follower_scoundrel_magicfind' : '0' if not 'scoundrel' in hero['followers'].keys() else str(hero['followers']['scoundrel']['stats']['magicFind']),
		'follower_templar_experience' : '0' if not 'templar' in hero['followers'].keys() else str(hero['followers']['templar']['stats']['experienceBonus']),
		'follower_templar_goldfind' : '0' if not 'templar' in hero['followers'].keys() else str(hero['followers']['templar']['stats']['goldFind']),
		'follower_templar_magicfind' : '0' if not 'templar' in hero['followers'].keys() else str(hero['followers']['templar']['stats']['magicFind']),
		'healing' : str(hero['stats']['healing']),
		'intelligence' : str(hero['stats']['intelligence']),
		'level' : str(hero['level']),
		'life' : str(hero['stats']['life']),
		'name' : hero['name'],
		'paragon_level' : str(hero['paragonLevel']),
		'resources' : [
			{
				'cur' : str(hero['stats']['primaryResource']),
				'max' : str(hero['stats']['primaryResource'])
			},
			{
				'cur' : 'NULL' if hero['stats']['secondaryResource'] == 0 else str(hero['stats']['secondaryResource']),
				'max' : 'NULL' if hero['stats']['secondaryResource'] == 0 else str(hero['stats']['secondaryResource']),
			}
		],
		'strength' : str(hero['stats']['strength']),
		'toughness' : str(hero['stats']['toughness']),
		'vitality' : str(hero['stats']['vitality'])
	}
# }}}

# Output! {{{
if(options.json):
	print json.dumps({'account_data' : account_data, 'heroes' : heroes}, sort_keys = True, indent = 4)
else:
	sys.stdout.write(timestamp + ' "Account: ' + account_data['name'] + '" "Diablo III account" "Career stats"')
	sys.stdout.write(' "Acts complete" GAUGE Number ' + str(account_data['acts_beaten']))
	sys.stdout.write(' "Kills" GAUGE Kills ' + account_data['lifetime_kills'])
	sys.stdout.write(' "Kills /sec" COUNTER64 Kills ' + account_data['lifetime_kills'])
	sys.stdout.write(' "Elite kills" GAUGE Kills ' + account_data['elite_kills'])
	sys.stdout.write(' "Elite kills /sec" COUNTER64 Kills ' + account_data['elite_kills'])
	for (key, label) in CLASSES.iteritems():
		sys.stdout.write(' "Time spent playing ' + label + '" GAUGE Percent ' + account_data['percent_time_' + key])
		sys.stdout.write(' "Highest level ' + label + '" GAUGE Level ' + account_data['highest_level_' + key])
	for (key, label) in ARTISANS.iteritems():
		sys.stdout.write(' "' + label + ' level on Normal" GAUGE Level ' + account_data[key + '_normal'])
		sys.stdout.write(' "' + label + ' level on Hardcore" GAUGE Level ' + account_data[key + '_hardcore'])
	sys.stdout.write("\n")

	for (hero_id, hero) in heroes.iteritems():
		sys.stdout.write(timestamp + ' "Hero: ' + hero['name'] + ' (#' + hero_id + ')" "Diablo III hero" "' + hero['class'] + '"')
		sys.stdout.write(' "Level" GAUGE Level ' + hero['level'])
		for (key, label) in STATS.iteritems():
			sys.stdout.write(' "' + label + '" GAUGE Number ' + hero[key])
		sys.stdout.write(' "Life" GAUGE Number ' + hero['life'])
		for i in xrange(0, len(hero['resources'])):
			sys.stdout.write(' "Resource ' + str(i) + ' current" GAUGE Number ' + hero['resources'][i]['cur'])
			sys.stdout.write(' "Resource ' + str(i) + ' maximum" GAUGE Number ' + hero['resources'][i]['max'])
		for (key, label) in FOLLOWERS.iteritems():
			for (stat_key, stat_label) in FOLLOWER_STATS.iteritems():
				sys.stdout.write(' "' + label + ' ' + stat_label + '" GAUGE Number ' + hero['follower_' + key + '_' + stat_key])
		sys.stdout.write(' "Elite kills" GAUGE Kills ' + hero['elite_kills'])
		sys.stdout.write(' "Elite kills /sec" COUNTER64 Kills ' + hero['elite_kills'])
		sys.stdout.write("\n")
		
# }}}

