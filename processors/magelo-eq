#!/usr/bin/python2.7
import calendar
import execjs
import json
import lxml.html
import mechanize
import optparse
import re
import sys
import time

# Constants {{{
regex_number = re.compile('-?[0-9,.]+')
regex_last_updated = re.compile('var\s*lastUpdated\s*=\s*new\s*Date\s*\(\s*([0-9]+)\s*\)\s*;')
regex_identity = re.compile('^\s*([0-9]+)\s+([A-Za-z- ]+)\s+([A-Za-z- ]+)\s+-\s+([A-Za-z- ]+)\s*$', re.MULTILINE)
regex_skills = re.compile('\s+(skills|tradeskills|languages)\[\s*[0-9]+\s*\]\s*=\s*new\s*Skill\s*\(\s*\'[^\']+\'\s*,\s*([0-9]+)\s*[,\)]')
regex_windows_newlines = re.compile("\r\n")
#regex_skills_trade = re.compile('^\s*skills\[[0-9]+\]\s*=\s*new\s*Skill\s*\(\'[^\']+\'\s*,\s*([0-9]+)\s*,')
#regex_skills_language = re.compile('^\s*skills\[[0-9]+\]\s*=\s*new\s*Skill\s*\(\'[^\']+\'\s*,\s*([0-9]+)\s*,')

stat_labels = {
	'basic' : {
		'HP' : ('Health', 'Health'),
		'MANA' : ('Mana', 'Mana'),
		'ENDR' : ('Endurance', 'Endurance'),
		'AC' : ('Armor', 'Armor'),
		'ATK' : ('Attack', 'Attack'),
		'AA' : ('Alternate advancement points', 'Points'),
		'HP+' : ('Health regeneration', 'Regeneration'),
		'MANA+' : ('Mana regeneration', 'Regeneration'),
		'HASTE' : ('Haste', 'Haste'),
		'STR' : ('Strength', 'Strength'),
		'STA' : ('Stamina', 'Stamina'),
		'AGI' : ('Agility', 'Agility'),
		'DEX' : ('Dexterity', 'Dexterity'),
		'WIS' : ('Wisdom', 'Wisdom'),
		'INT' : ('Intelligence', 'Intelligence'),
		'CHA' : ('Charisma', 'Charisma'),
		'Poison' : ('SV Poison', 'Resist'),
		'Magic' : ('SV Magic', 'Resist'),
		'Disease' : ('SV Disease', 'Resist'),
		'Fire' : ('SV Fire', 'Resist'),
		'Cold' : ('SV Cold', 'Resist'),
		'Corrupt' : ('SV Corruption', 'Resist'),
		'Weight' : ('Weight', 'Weight')
	},
	'advanced' : {
		'strikethrough' : ('Strikethrough', 'Strikethrough'),
		'hcha' : ('Heroic charisma', 'Chrisma'),
		'dotShielding' : ('DOT shielding', 'Shielding'),
		'avoidance' : ('Avoidance', 'Avoidance'),
		'spellDmg' : ('Spell damage', 'Damage'),
		'brass' : ('Brass instruments', 'Instruments'),
		'combat' : ('Combat effects', 'Combat effects'),
		'hpr' : ('Heroic SV Poison', 'Resist'),
		'percu' : ('Percussion instruments', 'Instruments'),
		'clairvoyance' : ('Clairvoyance', 'Clairvoyance'),
		'hwis' : ('Heroic wisdom', 'Wisdom'),
		'stun' : ('Stun resistance', 'Stun resistance'),
		'accuracy' : ('Accuracy', 'Accuracy'),
		'hcr' : ('Heroic SV Cold', 'Resist'),
		'shielding' : ('Shielding', 'Shielding'),
		'string' : ('String instruments', 'Instruments'),
		'spellShield' : ('Spell shielding', 'Shielding'),
		'hstr' : ('Heroic strength', 'Strength'),
		'hcor' : ('Heroic SV Corruption', 'Resist'),
		'hmr' : ('Heroic SV Magic', 'Resist'),
		'bsDmg' : ('Backstab damage', 'Damage'),
		'sing' : ('Singing', 'Instruments'),
		'hsta' : ('Heroic stamina', 'Stamina'),
		'hdr' : ('Heroic SV Disease', 'Resist'),
		'dmgShield' : ('Damage shield', 'Damage'),
		'healAmount' : ('Heal amount', 'Damage'),
		'hagi' : ('Heroic agility', 'Agility'),
		'hdex' : ('Heroic dexterity', 'Dexterity'),
		'wind' : ('Wind instruments', 'Instruments')
	}
}

# Have to add a bunch of function declarations to make the Magelo JS parse...
js_prefix = """// {{{
var items = [];
var abilities = [];
var abilityGrpTab = [];
var itemModifiers = {};
var modifiers = {};
var skills = [];
var tradeskills = [];
var languages = [];
var itemEffects = [];
var keys = [];
var flags = [];

function Item(id, name, icon, description, stackable, quantity, bag_size, swap, augments) {
	return {
		'id' : id,
		'name' : name,
		'icon' : icon,
		'description' : description,
		'stackable' : stackable,
		'quantity' : quantity,
		'bag_size' : bag_size,
		'swap' : swap,
		'augments' : augments
	};
}

function Ability(name, description, category, current, max, base, progression, next_cost) {
	return {
		'name' : name,
		'description' : description,
		'current' : current,
		'max' : max,
		'base' : base,
		'progression' : progression,
		'next_cost' : next_cost
	};
}

function AbilityGrp(id, xp, assigned, unspent, spent) {
	return {
		'id' : id,
		'xp' : xp,
		'assigned' : assigned,
		'unspent' : unspent,
		'spent' : spent
	};
}

function ItemModifier(item_index, value, aug_values) {
	return {
		'item_index' : item_index,
		'value' : value,
		'aug_values' : aug_values
	};
}

function Modifier(summable, cap) {
	return {
		'summable' : summable,
		'cap' : cap
	};
}

function Skill(name, value, is_tradeskill, mod, cap) {
	return {
		'name' : name,
		'value' : value,
		'is_tradeskill' : is_tradeskill,
		'mod' : mod,
		'cap' : cap
	};
}

function ItemEffect(id, name, type, slot, indoor, casting_time, description) {
	return {
		'id' : id,
		'name' : name,
		'type' : type,
		'slot' : slot,
		'indoor' : indoor,
		'casting_time' : casting_time,
		'description' : description
	};
}

function Key(name) {
	return {'name' : name};
}

function Flag(name) {
	return {'name' : name};
}

function get_stuff() {
	return {
		'items' : items,
		'abilities' : abilities,
		'ability_groups' : abilityGrpTab,
		'item_modifiers' : itemModifiers,
		'modifiers' : modifiers,
		'skills' : skills,
		'tradeskills' : tradeskills,
		'languages' : languages,
		'item_effects' : itemEffects,
		'keys' : keys,
		'flags' : flags
	};
}
/* }}} */"""
# }}}

def get_numbers(string): # {{{
	numbers = regex_number.findall(string)
	if(len(numbers) == 0):
		return ['NULL']
	
	for i in xrange(len(numbers)):
		numbers[i] = numbers[i].replace(',', '')
	
	return numbers
# }}}

def get_progress_bar_pct(elem, img_selector): # {{{
	style = elem.get('style').strip(';').split(';')
	style = {pair[0] : get_numbers(pair[1])[0] for pair in [item.split(':') for item in style]}
	img = elem.cssselect(img_selector)[0]
	return (float(img.get('width')) + 8) / (float(style['width']) - 4)
# }}}

# Parse command-line arguments {{{
cmdline = optparse.OptionParser(usage = 'usage: %prog profile-id')

(options, args) = cmdline.parse_args()
if(len(args) != 1):
	cmdline.print_help()
	sys.exit(1)

url = 'http://eq.magelo.com/profile/' + args[0]
# }}}

# Browser setup {{{
# Initialize the browser
br = mechanize.Browser()

# Enable some handlers
br.set_handle_equiv(True)
br.set_handle_gzip(True) # Required for Magelo
br.set_handle_redirect(True)
br.set_handle_referer(True)
br.set_handle_robots(False)

# Don't hang on >0 refresh times
br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time = 1)

# Lie, cheat, and steal
br.addheaders = [('User-agent', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.64 Safari/537.31 AlexaToolbar/alxg-3.1')]
# }}}

# Retrieve the main page, parse into an XML document, and get the last-updated timestamp
response = br.open(url)
page = response.read()
page = lxml.html.fromstring(page)
body = page.cssselect('html > body')[0]
timestamp = regex_last_updated.findall(body.cssselect('script')[0].text)[0]
timestamp = str(float(timestamp) / 1000.0)

# Find the profile panes and grab some character metadata
profile = body.cssselect('div#profile')[0]
main_window = profile.cssselect('div#mainWindow')[0]
identity = main_window.cssselect('div#identity')[0]
identity_matches = regex_identity.match(identity.cssselect('span')[1].text.strip()).groups()
character = {
	'name' : identity.cssselect('span#name')[0].text.strip(),
	'level' : identity_matches[0],
	'race' : identity_matches[1],
	'class' : identity_matches[2],
	'server' : identity_matches[3],
	'stats' : {}
}

# Grab the stats panel; parse stuff out of it
player_tab = main_window.cssselect('div#playerOngletContent > div#playerTabContent')[0]
stat_table = player_tab.cssselect('div#equipment > table#statTable > tr')
for row in stat_table:
	try:
		label = row.cssselect('td.tabCat')
		value = row.cssselect('td.tabCel')
		if(len(label) != 1 or len(value) != 1):
			continue
		label = label[0].text.strip()
		value = value[0].text.strip()
		if(not label in stat_labels['basic'].keys()):
			continue
		character['stats'][label] = get_numbers(value)[0]
	except e:
		continue
character['xp_pct'] = get_progress_bar_pct(main_window.cssselect('div#equipment > div#progressBar1')[0], 'img#totoImg')

# Money
money_rows = player_tab.cssselect('div#money > table#moneyTable > tr > td.moneyTabCel')
try:
	character['platinum_onchar'] = float(money_rows[0].text)
except:
	character['platinum_onchar'] = float(0)
try:
	character['platinum_onchar'] += 0.1 * float(money_rows[1].text)
except:
	pass

# Next, skills
character['skills'] = {'skills' : 0, 'tradeskills' : 0, 'languages' : 0}
for script in page.cssselect('html > body > script'):
	skill_lines = regex_skills.findall(script.text)
	if(len(skill_lines) > 0):
		for (cat, value) in skill_lines:
			character['skills'][cat] += int(value)

# Bank (money)
bank = profile.cssselect('div#bank')[0]
money_rows = bank.cssselect('table#bankTable > tr > td.moneyTabCel')
try:
	character['platinum_bank'] = float(money_rows[0].text)
except:
	character['platinum_bank'] = float(0)
try:
	character['platinum_bank'] += 0.1 * float(money_rows[1].text)
except:
	pass
try:
	character['platinum_sharedbank'] = int(bank.cssselect('table#sharedBankTable > tr > td.moneyTabCel')[0].text)
except:
	character['platinum_sharedbank'] = 0

# Advanced modifiers...these will be a little more complex, requiring the ExecJS engine
js = execjs.get()
# Chop off the top 101 lines of this JS - we don't care about them
js_code = body.cssselect('script')[0].text.split('\n')
js_code = "\n".join(js_code[:10]) + js_prefix + "\n\n" + regex_windows_newlines.sub("\n", "\n".join(js_code[102:]))
jsc = js.compile(js_code)
stuff_from_page = jsc.call('get_stuff')
for key, stat in stuff_from_page['item_modifiers'].items():
	if(len(stat) < 1):
		stuff_from_page['item_modifiers'][key] = 0
	elif(stuff_from_page['modifiers'].has_key(key) and not stuff_from_page['modifiers'][key]['summable']):
		stuff_from_page['item_modifiers'][key] = max([mod['value'] for mod in stat])
	else:
		stuff_from_page['item_modifiers'][key] = sum([mod['value'] for mod in stat])

for key, stat in stuff_from_page['item_modifiers'].items():
	if(stuff_from_page['modifiers'].has_key(key) and stuff_from_page['modifiers'][key]['cap'] != -1):
		if(stat > stuff_from_page['modifiers'][key]['cap']):
			stuff_from_page['item_modifiers'][key] = stuff_from_page['modifiers'][key]['cap']

sys.stdout.write(timestamp + ' "' + character['name'] + ' (' + character['server'] + ')" "EverQuest character" "' + character['race'] + ' ' + character['class'] + '"')
sys.stdout.write(' Level GAUGE Level ' + character['level'])
sys.stdout.write(' "Experience toward next level" GAUGE Percent ' + str(character['xp_pct'] * 100))
for key, value in character['stats'].iteritems():
	sys.stdout.write(' "' + stat_labels['basic'][key][0] + '" GAUGE "' + stat_labels['basic'][key][1] + '" ' + str(value))
for key, value in stuff_from_page['item_modifiers'].iteritems():
	if(key in stat_labels['advanced'].keys()):
		sys.stdout.write(' "' + stat_labels['advanced'][key][0] + '" GAUGE "' + stat_labels['advanced'][key][1] + '" ' + str(value))
sys.stdout.write(' "Total of combat skill levels" GAUGE Skills ' + str(character['skills']['skills']))
sys.stdout.write(' "Total of trade skill levels" GAUGE Skills ' + str(character['skills']['tradeskills']))
sys.stdout.write(' "Total of language skill levels" GAUGE Skills ' + str(character['skills']['languages']))
sys.stdout.write(' "Money on character" GAUGE Platinum ' + str(character['platinum_onchar']))
sys.stdout.write(' "Money in bank" GAUGE Platinum ' + str(character['platinum_bank']))
sys.stdout.write(' "Money in shared bank" GAUGE Platinum ' + str(character['platinum_sharedbank']))
sys.stdout.write("\n")

