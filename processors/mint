#!/usr/bin/python3
import datetime
import json
import optparse
import sys
import time

from libraries.mintapi.mintapi.api import Mint

def get_timestamp(): # {{{
	return str(int(time.mktime(datetime.datetime.now().timetuple())))
# }}}

# Parse command-line arguments {{{
cmdline = optparse.OptionParser(usage = 'usage: %prog [options] email-address password')

(options, args) = cmdline.parse_args()
if(len(args) != 2):
	cmdline.print_help()
	sys.exit(1)

(user,password,) = args
# }}}

mint = Mint.create(user, password)

# Accounts, then totals {{{
timestamp = get_timestamp()
accounts = mint.get_accounts(get_detail = True)
total_assets = 0.0
total_debt = 0.0
for account in accounts:
	if(account['isClosed']):
		continue
	
	if(account['accountType'] == 'bank'):
		total_assets = total_assets + account['value']
		print(
			timestamp,
			'"Account: ' + account['accountName'] + '"',
			'"Mint Account: Bank"',
			'"' + account['fiName'] + '"',
			'"Value" GAUGE Number ' + str(account['value']),
			'"Available Cash" GAUGE Number ' + str(account['availableMoney']),
			'"APY" GAUGE Number ' + str(account['interestRate'] * 100.0),
			'"Total Fees" GAUGE Number ' + str(account['totalFees'])
		)
	elif(account['accountType'] == 'credit'):
		total_debt = total_debt + account['value']
		print(
			timestamp,
			'"Account: ' + account['accountName'] + '"',
			'"Mint Account: Credit"',
			'"' + account['fiName'] + '"',
			'"Value" GAUGE Number ' + str(account['value']),
			'"Available Credit" GAUGE Number ' + str(account['availableMoney']),
			'"Total Credit" GAUGE Number ' + str(account['totalCredit']),
			'"APR" GAUGE Number ' + str(account['interestRate']),
			'"Total Fees" GAUGE Number ' + str(account['totalFees'])
		)
	elif(account['accountType'] == 'investment'):
		total_assets = total_assets + account['value']
		print(
			timestamp,
			'"Account: ' + account['accountName'] + '"',
			'"Mint Account: Investment"',
			'"' + account['fiName'] + '"',
			'"Value" GAUGE Number ' + str(account['value']),
			'"Total Fees" GAUGE Number ' + str(account['totalFees'])
		)
	elif(account['accountType'] == 'loan'):
		account['value'] = -account['value']
		total_debt = total_debt + account['value']
		print(
			timestamp,
			'"Account: ' + account['accountName'] + '"',
			'"Mint Account: Loan"',
			'"' + account['fiName'] + '"',
			'"Value" GAUGE Number ' + str(account['value']),
			'"Next Payment" GAUGE Number ' + str(account['dueAmt'])
		)
	elif(account['accountType'] in ['real estate', 'vehicle', 'other property']):
		value = account['value']
		if(value > 0):
			total_assets = total_assets + value
		else:
			total_debt = total_debt + value
		print(
			timestamp,
			'"Account: ' + account['accountName'] + '"',
			'"Mint Account: Other"',
			'"' + account['fiName'] + '"',
			'"Value" GAUGE Number ' + str(account['value'])
		)

print(
	timestamp,
	'"Totals"',
	'"Mint Totals"',
	'"Totals"',
	'"Assets" GAUGE Number ' + str(total_assets),
	'"Debt" GAUGE Number ' + str(total_debt),
	'"Net Worth" GAUGE Number ' + str(total_assets + total_debt)
)
# }}}

timestamp = get_timestamp()
budgets = mint.get_budgets()
for direction in budgets:
	present = None
	past = None
	if(direction == 'spend'):
		present = 'Spend'
		past = 'Spent'
	elif(direction == 'income'):
		present = 'Income'
		past = 'Earned'

	for budget in budgets[direction]:
		cat_name = budget['cat']['parent']['name'] + ': ' + budget['cat']['name']
		print(
			timestamp,
			'"Budget: ' + cat_name + '"',
			'"Mint Budget: ' + present + '"',
			'"' + cat_name + '"',
			'"Limit" GAUGE Number ' + str(budget['bgt']),
			'"' + past + '" GAUGE Number ' + str(budget['amt']),
			'"Percent ' + past + '" GAUGE Number ' + (str(budget['amt'] / budget['bgt']) if budget['bgt'] != 0 else 'NULL')
		)

mint.initiate_account_refresh()

